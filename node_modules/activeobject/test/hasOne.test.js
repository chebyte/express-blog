var assert = require('assert');
var activeobject = require('../');

var Head = activeobject({ 
  attributeAccessible: {
    hairColor: "string"
  }
});
  
var Person = activeobject({
  hasOne: { head: Head }
});

module.exports = {
  "Should create relation properties" : function() {
    var headDescriptor = Object.getOwnPropertyDescriptor(Person.prototype, "head");
    assert.ok(headDescriptor.enumerable);
    assert.ok(headDescriptor.configurable);
    assert.equal(typeof headDescriptor, "object");
    assert.equal(typeof headDescriptor.get, "function");
    assert.equal(typeof headDescriptor.set, "function");
    
    var headAttributesDescriptor = Object.getOwnPropertyDescriptor(Person.prototype, "headAttributes");
    assert.ok(headAttributesDescriptor.enumerable);
    assert.ok(headAttributesDescriptor.configurable);
    assert.equal(typeof headAttributesDescriptor, "object");
    assert.equal(typeof headAttributesDescriptor.get, "undefined");
    assert.equal(typeof headAttributesDescriptor.set, "function");
  },
  
  "Should update relation through nested attributes" : function() {
    var mike = new Person();
    mike.head = new Head();
    assert.equal(mike.head.hairColor, null);
    mike.headAttributes = { hairColor: "brown" };
    assert.equal(mike.head.hairColor, "brown");
  },
  
  "Should update relation through instantiation" : function() {
    var mike = new Person({ head: { hairColor: "brown"}});
    assert.equal(mike.head.hairColor, "brown");
  },
  
  "Should get null relation" : function() {
    var mike = new Person();
    assert.equal(mike.head, null);
  },
  
  "Should create nested object through nested attributes" : function() {
    var joe = new Person();
    assert.ok(!joe.head);
    
    joe.attributes = {
      headAttributes: { 
        hairColor: "brown" 
      }
    };
    
    var head = joe.head;
    assert.ok(head);
    assert.equal(head.hairColor, "brown");
  },
  
  "Should store instance after retrieval" : function() {
    var joe = new Person({
      head : {
        hairColor: "brown"
      }
    });
    
    assert.ok(joe.head === joe.head);
  }
};