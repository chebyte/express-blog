// cycle through attributes

function validateType(type) {
  if (["string", "float", "int", "date", "boolean", "currency", "percent"].indexOf(type) < 0) {
    throw "Unsupported type " + type + " defined";
  }
}


function defineGetter(object, name, type) {
  if (type == "date") {
    object.prototype.__defineGetter__(name, function() {
      if (this._attrs[name]) {
         return  new Date(this._attrs[name]);
      }
      return  null;
    });
  
  // Handle all other types
  } else {
    object.prototype.__defineGetter__(name, function() {
      return this._attrs[name];
    });
  }
}

function defineSetter(object, name, type) {
  if (type == "string") {
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      this._attrs[attribute] = value;
    });
  } else if (type == "float") {
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      this._attrs[attribute] = parseFloat(value, 10) || 0;
    });
  } else if (type == "int") { 
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      this._attrs[attribute] = parseInt(value, 10) || 0;
    });
  } else if (type == "date") {
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      if (typeof value === "object" && value !== null && value !== undefined) {            
        var month = parseInt(value.month, 10) || null;
        var year = parseInt(value.year, 10) || null;
          if (typeof month == "number" && typeof year == "number") {
            this._attrs[attribute] = new Date(year, month-1, 
              parseInt(value.day, 10) || 1, 
              parseInt(value.hour, 10) || null, 
              parseInt(value.minutes, 10) || null, 
              parseInt(value.seconds, 10) || null, 
              parseInt(value.milliseconds, 10) || null).toUTCString();
          } else if (_.isDate(value)) {
            this._attrs[attribute] = value.toUTCString();
          } else {
            this._attrs[attribute] = null;
          }
        } else if (typeof value === "string") {
          var value = new Date(value);
          if (value != "Invalid Date") {
            this._attrs[attribute] = value.toUTCString();
          } else {
            this._attrs[attribute] = null;
          }
        }
    });
  } else if (type == "boolean") {
    object.prototype.__defineSetter__(name, function(value) {
      if (_.isArray(value)) {
        value = value[value.lenght-1];
      }

      this._attrsBeforeTypeCast[attribute] = value;
      value = value === "false" ? false : value;
      value = value === "" ? null : value;
      this._attrs[attribute] = new Boolean(value).valueOf();
    }); 
  } else if (type == "currency") {
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      if (typeof value === "string") { 
        value = value.replace(/[$,]+/g,"");
      }
      this._attrs[attribute] = parseFloat(value);
    });
  } else if (type == "percent") {
    object.prototype.__defineSetter__(name, function(value) {
      this._attrsBeforeTypeCast[attribute] = value;
      this._attrs[attribute] = parseFloat(value, 10);
    });
  }
}


module.exports = function(props) {
  
  var attributes =  props.attributes;
  
  for (name in attributes) {
    if (attributes.hasOwnProperty(name)) {
      var type = attributes[name];
      validateType(type);
      
      defineGetter(props, name, type);
      defineSetter(props, name, type);      
    }
  }
};