function ActiveObject(options) {
  
  var _ =  require('underscore/underscore')._;
  var uuid = typeof uuid == "undefined" ? require("node-uuid") : uuid;
  
  var trackUpdates = options.trackUpdates || [];
  // Make the <attributeName>UpdatedAt properties accessible
  _.each(trackUpdates, function(attribute) {
    options.attributeAccessible.push(attribute + "UpdatedAt");
  });
  
  var Clazz = function(attrs) {
    this.errors = {};
    this.attrs = attrs || {};
    this.attrsBeforeTypeCast = {};
    this.instanceVariables = {};
    
    if (typeof options.setup == "function") {
      options.setup.call(this);
    }
    
    // Ensure that only expected properties are accepted onto the object.
    if (typeof Object.seal == "function") {
      Object.seal(this);
    }
  };
  
  Clazz['new'] = function(attrs) {
    var clazz = new Clazz({});
    clazz.attributes = attrs;
    return clazz;
  };
  
  Clazz.prototype.generateId = function() {
    return this.id = uuid();
  }
  
  Clazz.prototype.__defineSetter__("attributes", function(attrs) {
    _.extend(this, attrs);
  });
  
  Clazz.prototype.__defineGetter__("attributes", function() {
    return this.attrs;
  });
  
  Clazz.prototype.__defineSetter__("id", function(id) {
    this.attrs.id = id;
  });

  Clazz.prototype.__defineGetter__("id", function() {
    return (this.attrs.id && this.attrs.id != "") ? this.attrs.id : null;
  });

  Clazz.prototype.__defineSetter__("remove", function(val) {
    this.markedForDestruction = true;
  });

  Clazz.prototype.__defineSetter__("markForDestruction", function(destroy) {
    this.attrs.markForDestruction = (destroy !== false);
  });
  
  Clazz.prototype.__defineGetter__("markedForDestruction", function() {
    return this.attrs.markForDestruction === true;
  });

  Clazz.prototype.__defineGetter__("newRecord", function() {
    return !this.attrs.id || this.attrs.id == "";
  });
  
  Clazz.prototype.isBlank = function(attr) {
    return this.attrs[attr] === null || this.attrs[attr] === undefined || this.attrs[attr] === "";
  }
  
  // Define Basic Getters/Setters
  _.each(options.attributeAccessible, function(type, attribute) {
    
    if (["string", "float", "int", "date", "boolean", "currency", "percent"].indexOf(type) < 0) throw "Unsupported type " + type + " defined", options;
    
    // Define regular setter
    Clazz.prototype.__defineSetter__(attribute, ({
      "string" : function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        this.attrs[attribute] = value;
      },
      
      "float" : function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        this.attrs[attribute] = parseFloat(value, 10) || 0;
      },
      
      "int" : function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        this.attrs[attribute] = parseInt(value, 10) || 0;
      },
      
      "date" : function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        if (typeof value === "object" && value !== null && value !== undefined) {            
          var month = parseInt(value.month, 10) || null;
          var year = parseInt(value.year, 10) || null;
          
          if (typeof month == "number" && typeof year == "number") {
            this.attrs[attribute] = new Date(year, month-1, 
              parseInt(value.day, 10) || 1, 
              parseInt(value.hour, 10) || null, 
              parseInt(value.minutes, 10) || null, 
              parseInt(value.seconds, 10) || null, 
              parseInt(value.milliseconds, 10) || null).toUTCString();
          } else if (_.isDate(value)) {
            this.attrs[attribute] = value.toUTCString();
          } else {
            this.attrs[attribute] = null;
          }
        } else if (typeof value === "string") {
          var value = new Date(value);
          if (value != "Invalid Date") {
            this.attrs[attribute] = value.toUTCString();
          } else {
            this.attrs[attribute] = null;
          }
        }
      },
        
      "boolean" : function(value) {
        if (_.isArray(value)) {
          value = value[value.length-1];
        }
        
        this.attrsBeforeTypeCast[attribute] = value;
        value = value === "false" ? false : value;
        value = value === "" ? null : value;
        this.attrs[attribute] = new Boolean(value).valueOf();
      },
      
      "currency" : function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        if (typeof value === "string") { 
          value = value.replace(/[$,]+/g,"");
        }
        this.attrs[attribute] = parseFloat(value);
      },
      
      "percent": function(value) {
        this.attrsBeforeTypeCast[attribute] = value;
        this.attrs[attribute] = parseFloat(value, 10);
      }
      
    })[type]);
    
    // Handle dates appearing as Date objects or
    if (type == "date") {
      Clazz.prototype.__defineGetter__(attribute, function() {
        if (this.attrs[attribute]) {
           return  new Date(this.attrs[attribute]);
        }
        return  null;
      });
    } else {
      Clazz.prototype.__defineGetter__(attribute, function() {
        return this.attrs[attribute];
      });
    }
    
    
    Clazz.prototype.__defineGetter__(attribute + "BeforeTypeCast", function() {
      return this.attrsBeforeTypeCast[attribute];
    });
    
  });
  
  // Define hasOne relations
  _.each(options.hasOne, function(relationClazz, relation) {
    
    Clazz.prototype.__defineGetter__(relation, function() {
      if (!this.attrs[relation]) {
        return null;
      }
      
      return this.instanceVariables[relation] = this.instanceVariables[relation] || new relationClazz(this.attrs[relation]);
    });
    
    Clazz.prototype.__defineSetter__(relation, function(value) {
      if (!value instanceof relationClazz) { 
        throw "unexpected type for " + relation 
      }
      
      this.attrs[relation] = value ? value.attributes : value;
      this.instanceVariables[relation] = value;
    });
    
    Clazz.prototype.__defineSetter__(relation + "Attributes", function(attributes) {
      this.attrs[relation] = this.attrs[relation] || {};
      var instance = new relationClazz(this.attrs[relation]);
      instance.attributes = attributes;
    });
  });
  
  // Define hasMany relations
  _.each(options.hasMany, function(relationClazz, relation) {
  
    Clazz.prototype.__defineGetter__(relation, function() {
      var self = this;
      
      if (!this.instanceVariables[relation]) {
        var collection = _.map(self.attrs[relation], function(attributes) {
          var relationInstance = new relationClazz(attributes);
          var propertyDescriptor = Object.getOwnPropertyDescriptor(relationClazz, options.type);
          if (propertyDescriptor && propertyDescriptor.set) {
            relationInstance[options.type] = self;
          }
          
          return new relationClazz(attributes);
        });
        
        collection.build = function(attrs) {
          self.attrs[relation] = self.attrs[relation] || [];
        
          var instance = new relationClazz({});
          instance.attributes = attrs || {};
          self.attrs[relation].push(instance.attributes);
          this.push(instance);
          return instance;
        };
        
        collection.findById = function(id) {
          return _.detect(this, function(object) {
            return object.id == id;
          });
        }
        
        this.instanceVariables[relation] = collection;
      } 

      return this.instanceVariables[relation];
    });
    
    Clazz.prototype.__defineSetter__(relation, function(value) {
      this.attrs[relation] = value;
      this.instanceVariables[relation] = value;
    });
    
    Clazz.prototype.__defineSetter__(relation + "Attributes", function(attributes) {
      attributes = _.values(attributes);
      var self = this;
      var relationInstances = self[relation];
      _.each(attributes, function(relationAttributes) {
        if (!relationAttributes.id) {
         relationInstances.build(relationAttributes);
        } else {
          var relationInstance = relationInstances.findById(relationAttributes.id);
          if (relationInstance) {
            relationInstance.attributes = relationAttributes;
          } else {
            relationInstances.build(relationAttributes);
          }
        }
      });
      
    });
  });
  
  // Create Clean
  Clazz.prototype.clean = function() {
    
    var self = this;
    _.each(options.hasOne, function(relationClazz, relation) {
      if (typeof relationClazz !== "function") {
        throw relation + " relation must be a function."
      }
      
      var relationInstance = self[relation];
      if (relationInstance){
        relationInstance.clean();
        if (relationInstance.markedForDestruction) {
          delete self.attrs[relation];
        }
      }
    });
    
    _.each(options.hasMany, function(relationClazz, relation) {
      if (typeof relationClazz !== "function") {
        throw relation + " relation must be a function."
      }
      
      self.attrs[relation] = _.reject(self.attrs[relation], function(relationInstance) {
        relationInstance = new relationClazz(relationInstance);
        relationInstance.clean();
        return relationInstance.markedForDestruction;
      });
      
      if (self.attrs[relation] && self.attrs[relation].length === 0) {
        delete self.attrs[relation];
      }
      
    });
    
    if (this.newRecord) {
      this.attrs.id = uuid();
    }
  };
  
  // Create Validations
  Clazz.prototype.validate = function() {
    this.errors = {};
    if (_.isFunction(this.normalize)) {
      this.normalize();
    }
    
    var self = this;
    // Validate hasOne Relationships
    _.each(options.hasOne, function(relationClazz, relation) {
      var relationInstance = self[relation];
      if (relationInstance) {
        relationInstance.validate();
      }
    });
    
    // Validate hasMany Relationships
    _.each(options.hasMany, function(relationClazz, relation) {
      _.each(self[relation], function(relationInstance) {
        relationInstance.validate();
      });
    });
    
    if (this.markedForDestruction) return;
    var self = this;
    _.each(options.validations, function(validation, attribute) {
      var value = self.attrs[attribute];
      
      // Check if validation is conditional
      if (typeof validation["if"] === "function" && !validation["if"].call(self)) {
        return;
      }
      
      var required = validation.required;
      if (required && (value === undefined || value === null || value === "")) {
        self.errors[attribute] = required && required.message || Record.titleize(attribute) + " is required."
        return;
      }
      
      var length = validation.length;
      if (length && length.maximum && _.isString(value) && value.length > length.maximum) {
        self.errors[attribute] = length.message ||  Record.titleize(attribute) + " cannot exceed " + length.maximum + " characters.";
        return;
      }
    });
    
    return _.size(this.errors) == 0;
  };
  
  return Clazz;
}

ActiveObject.titleize = function(string){
  if(string.length == 0) return string;
  return string[0].toUpperCase() + string.substr(1);
}

if (typeof module !== 'undefined') {
  module.exports = ActiveObject;
}